import { AppConstants } from '@/constants';
import Layout from '@/containers/layout';
import GlobalStyles from '@/styles/global';
import type { AppProps } from 'next/app';
import Head from 'next/head';
import { Fragment } from 'react';
import 'bootstrap/dist/css/bootstrap.min.css';
import NextNProgress from 'nextjs-progressbar';
import { SessionProvider } from 'next-auth/react';
import { GetServerSidePropsContext } from 'next';
import { getServerSession } from 'next-auth';
import { authOptions } from './api/auth/[...nextauth]';
import { wrapper } from '@/store';
import { DefaultSeo } from 'next-seo';

const App = ({ Component, pageProps: { session, ...pageProps } }: AppProps) => {
  return (
    <SessionProvider session={session}>
      <Fragment>
        <Head>
          <title>{AppConstants.NAME}</title>
          <meta name="description" content="Generated by create next app" />
          <meta name="viewport" content="width=device-width, initial-scale=1" />
          <meta charSet="utf-8" />
          <meta name="google-site-verification" content="L8NgfBqQ2zl324T2q2qMcdL6ueoAVoLLNJOQYxE4vOU" />
          {/* <link rel="icon" href="/favicon.ico" /> */}
          <link rel='icon' href='/logo/cat-16.ico' />
          <link rel='icon' href='/logo/cat-24.ico' />
          <link rel='icon' href='/logo/cat-32.ico' />
          <link rel='icon' href='/logo/cat-64.ico' />
          <link rel='icon' href='/logo/cat-128.ico' />
          <link rel='icon' href='/logo/cat-256.ico' />
          <link rel='icon' href='/logo/cat-512.ico' />

          <link rel="preconnect" href="https://fonts.googleapis.com" />
          <link rel="preconnect" href="https://fonts.gstatic.com" crossOrigin='anonymous' />
          <link href="https://fonts.googleapis.com/css2?family=Montserrat:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900&display=swap" rel="stylesheet" />
        </Head>
        <GlobalStyles />
        <NextNProgress />
        <Layout isAuth={pageProps?.isAuth}>
          <Component {...pageProps} />
        </Layout>
      </Fragment>
    </SessionProvider>
  );
}

export const getServerSideProps = async ({ req, res }: GetServerSidePropsContext) => {
  const session = await getServerSession(req, res, authOptions);
  return {
    props: {
      isAuth: (session && session?.jwt && session?.user),
    }
  }
}

export default wrapper.withRedux(App);